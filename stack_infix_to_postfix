#include<iostream>
#include<limits>
#include<string.h>

using namespace std;

struct Stack
{
   int top;
   unsigned capacity;
   char * Array;
};

Stack * createStack(unsigned cap)
{
    Stack * st = new Stack();
    st->capacity = cap;
    st->top = -1;
    st->Array = new char[cap*sizeof(char)];
    return st;
}

int isFull(Stack *s)
{
    return (s->top == s->capacity -1);
}

int isEmpty(Stack *s)
{
    return (s->top == -1);
}

void push(Stack * s,char item)
{
        if (isFull(s))
            return;
        s->Array[++s->top] = item;
        cout << "\n\t "<<item<<" Pushed to stack";
}

int pop(Stack * s)
{
    if(isEmpty(s))
        return INT_MIN;
    else
        return s->Array[s->top--];
}

int isOperand(char x)
{
    return (x >= 'a' && x <= 'z') || (x>= 'A' && x <= 'Z');
}

int prec(char ch)
{
    switch(ch)
    {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    case '^':
        return 3;

    }
    return -1;
}

void infixtopostfix(char * exp)
{
    Stack *s = createStack(strlen(exp));
    char op[strlen(exp)];
    int k = 0;
    cout << "\n\tlength is "<< strlen(exp);

    for(int i = 0; exp[i];i++)
    {

        if(isOperand(exp[i]))
        {
            cout <<"\noperand = "<< exp[i];
            op[k++] = exp[i];
        }
        else if(prec(s->Array[s->top]) <= prec(exp[i]))
        {
            cout <<"\noperator = "<< exp[i]<<" top of array = "<<s->Array[s->top];
            push(s,exp[i]);
        }
        else
        {
           cout <<"\noperator = "<< exp[i]<<" top of array = "<<s->Array[s->top];
           while(prec(exp[i]) < prec(s->Array[s->top]))
           {
               op[k++] = pop(s);
           }
           push(s,exp[i]);
        }
    }

    while(!isEmpty(s))
    {
        op[k++] = pop(s);
    }
    cout <<"\n\n\tOutput string : ";

    for(int j=0;op[j];j++)
        cout<< op[j];

}
int main(void)
{
//    struct Stack *st = createStack(100);
    cout << "\n\tHello World ";
    char exp[] = "a+b*c+d";
    cout << exp;
    infixtopostfix(exp);
//    push(st,10);
//    push(st,22);
//    push(st,33);
//    cout<<"\n\n";
//    cout <<"\n\t "<< pop(st) << " popped from stack";
//    cout <<"\n\t "<< pop(st) << " popped from stack";
//    cout <<"\n\t "<< pop(st) << " popped from stack";
//    cout <<"\n\t "<< pop(st) << " popped from stack";

        return 0;
}

