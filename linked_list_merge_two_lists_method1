#include <iostream>
#include <cassert>
#include <stdlib.h>

using namespace std;

struct node
{
    int data;
    struct node * next;
};

node * create_new_node(int val)
{
    node * temp = new node;
    temp->data = val;
    temp->next = NULL;
    return temp;
}

void Insert(node **head_ref,int val)
{
    node * new_node = create_new_node( val);
    new_node->next = *head_ref;
    *head_ref = new_node;
}

void Display(node * head)
{
    cout << "\n\tLinked list is : ";
    if (head == NULL)
        cout << "NULL";
    else
    {


    while(head->next != NULL)
    {
        cout << "\t" << head->data;
        head = head->next;
    }
        cout << "\t" << head->data;
    }
}

//void copy_head1(node ** head3_ref , node *head1)
//{
//    while(head1)
//    {
//        node *new_node = create_new_node(head1->data);
//        head1 = head1->next;
//        *head3_ref->next = copy_head1(head3_ref,head1);
//    }
//}

void merge_lists(node* head1,node*head2)
{
    node* head3 = NULL;
    node * head3_ref;
    if(head1 == NULL && head2 == NULL)
    {
        cout << "\n\tboth are NULL";
        return;
    }

    while(head1!= NULL && head2!= NULL)
    {
      cout <<"\n\t both not NULL";

      if(head1->data < head2->data)
      {
        node * new_node = create_new_node(head1->data);
        head1 = head1->next;
        if(head3 == NULL)
        {
            head3 = new_node;
            head3_ref = head3;
        }
        else
        {
            head3->next = new_node;
            head3 = head3->next;
        }
      }
    else
      if(head1->data > head2->data)
      {
        node * new_node = create_new_node(head2->data);
        head2 = head2->next;
        if(head3 == NULL)
        {
            head3 = new_node;
            head3_ref = head3;
        }
        else
        {
            head3->next = new_node;
            head3 = head3->next;
        }
      }
    }


    if(head1 != NULL && head2 == NULL)
    {
        cout << "\n\t in here";
        while(head1!= NULL)
        {
        node * new_node = create_new_node(head1->data);
        head1 = head1->next;
        if(head3 == NULL)
        {
            head3 = new_node;
            head3_ref = head3;
        }
        else
        {
            head3->next = new_node;
            head3 = head3->next;
        }
        }
    }

    if(head1 == NULL && head2 != NULL)
    {
        cout << "\n\t in here";
        while(head2!= NULL)
        {
        node * new_node = create_new_node(head2->data);
        head2 = head2->next;
        if(head3 == NULL)
        {
            head3 = new_node;
            head3_ref = head3;
        }
        else
        {
            head3->next = new_node;
            head3 = head3->next;
        }
        }
    }
    Display(head3_ref);
}
int main()
{
    struct node *head1 = NULL;

    Insert(&head1,6);
    Insert(&head1,4);
    Insert(&head1,2);
    node * head2 = NULL;
    Insert(&head2,9);
    Insert(&head2,7);
    Insert(&head2,5);
    Insert(&head2,3);
    Insert(&head2,1);
    cout << "Hello world!" << endl;
    Display(head1);
    Display(head2);
//    node * head3 = Merge_lists(head1,head2);
    cout <<"\n\n back here";
//    copy_head1(&head3,head1);
    merge_lists(head1,head2);

    return 0;
}
