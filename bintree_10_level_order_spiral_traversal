#include <iostream>
#include<stack>

using namespace std;

struct node
  {
      int data;
      node * left ;
      node * right;
  };
node * newNode(int data)
    {
        node * temp = new node();
        temp->data = data;
        temp->left = NULL;
        temp->right = NULL;
        return temp;
    }


void print_inorder(node *root)
{
    if(root == NULL)
        return;
    else
    {
        print_inorder(root->left);
        cout << "\t" << root->data;
        print_inorder(root->right);
    }
}

void level_order_spiral(node *root)
{
    stack <node *> s1;
    stack <node *> s2;

    bool left_to_right = 1;

    node * curr;

    if(root == NULL )
        return ;
    else
    {
        cout << "\t" << root->data;
        if(root->left != NULL)
            s1.push(root->left);
        if(root->right != NULL)
            s1.push(root->right);
    }

    while(!s1.empty() or !s2.empty())
    {
        if(left_to_right == 1)
        {
          //  cout << "\n left to right \t";
            while(!s1.empty())
            {
                curr = s1.top();
                s2.push(curr);
                s1.pop();
            }
            while(!s2.empty())
            {
                curr = s2.top();
                cout << "\t" << curr->data;
                if(curr->left != NULL)
                    s1.push(curr->left);
                if(curr->right != NULL)
                    s1.push(curr->right);

                    s2.pop();
            }
            left_to_right = 0;
        }
        else
        {
            //cout << "\nright to left\t";
            while(!s1.empty())
            {
                curr = s1.top();
                cout << "\t" << curr->data;
                s2.push(curr);
                s1.pop();
            }
            while(!s2.empty())
            {
                curr = s2.top();
             //   cout << "\t" << curr->data;
                if(curr->left != NULL)
                    s1.push(curr->left);
                if(curr->right != NULL)
                    s1.push(curr->right);

                    s2.pop();
            }
            left_to_right = 1;
        }

    }

}

void level_order_spiral_efficient(node * root)
{
    stack <node * > s1;
    stack <node * > s2;

    s1.push(root);
    node * curr;
    while(!s1.empty() || !s2.empty())
    {

        while(!s1.empty())
        {
            curr = s1.top();
            cout << "\t" << curr->data;
            if(curr->right != NULL)
                s2.push(curr->right);
            if(curr->left != NULL)
                s2.push(curr->left);

            s1.pop();
        }
        while(!s2.empty())
        {
            curr = s2.top();
            cout << "\t" << curr->data;
            if(curr->left != NULL)
                s1.push(curr->left);
            if(curr->right != NULL)
                s1.push(curr->right);

            s2.pop();
        }
    }
}
int main()
    {
        cout << "Hello world!" << endl;
        node * root = newNode(11);
        root->left = newNode(22);
        root->right = newNode(33);
        root->left->left = newNode(44);
        root->right->left = newNode(66);
        root->left->right = newNode(55);
        root->left->right->left = newNode(99);
        root->left->right->right = newNode(88);
        root->right->right = newNode(77);
        root->right->right->left = newNode(111);
        root->right->right->right = newNode(100);

        print_inorder(root);
        cout <<"\n\n";
        level_order_spiral(root);
        cout <<"\n\n\tEfficiently : \n";
        level_order_spiral_efficient(root);
        return 0;
    }
