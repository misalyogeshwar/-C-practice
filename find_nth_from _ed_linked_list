#include <iostream>
#include <cassert>

using namespace std;

struct node
{
    int data;
    struct node * next;
};

node * create_new_node(int val)
{
    node * temp = new node;
    temp->data = val;
    temp->next = NULL;
    return temp;
}

void Insert(node **head_ref,int val)
{
    node * new_node = create_new_node( val);
    new_node->next = *head_ref;
    *head_ref = new_node;
}

void Display(node * head)
{
    cout << "\n\tLinked list is : ";
    if (head == NULL)
        cout << "NULL";
    else
    {


    while(head->next != NULL)
    {
        cout << "\t" << head->data;
        head = head->next;
    }
        cout << "\t" << head->data;
    }
}

void get_n_end(node * head,int cnt)
{
    node * ptr1 = head;
    node * ptr2 = head;
    int key = cnt;
    if(head!= NULL)
    {
        while(cnt)
        {
            cnt--;
            ptr1 = ptr1->next;
        }
        while(ptr1!= NULL)
        {
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        cout <<"\n\t" << key << " node from last : " << ptr2->data;
    }
}
int main()
{
    struct node *head = NULL;
    Insert(&head,85);
    Insert(&head,77);
    Insert(&head,6);
    Insert(&head,51);
    Insert(&head,44);
    Insert(&head,38);
    Insert(&head,26);
    Insert(&head,11);

    cout << "Hello world!" << endl;
    Display(head);
    get_n_end(head,8);
    return 0;
}
