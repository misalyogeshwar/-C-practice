#include <iostream>

using namespace std;

struct node
{
    int key;
    struct node * left ;
    struct node * right;
};

class btree
{
public:
    btree();
    ~btree();
    void insert(int key);
    void display_tree();
    void destroy_tree();
    node * search(int key);

private:
    void destroy_tree(node * leaf);
    void insert(int key,node * leaf);
    node * search(int key,node * leaf);
    void display_tree(node * leaf);
    node *root;
};
//The public version of the search function is used to set off the search
//recursion at the root node, keeping it from being necessary for the user to have access to the root node.
node * btree::search(int key , node * leaf)
{
    if (leaf!=NULL)
    {
        if (key == leaf->key)
            return leaf;
        else if (key < leaf->key)
            return search(key,leaf->left);
        else
            return search(key,leaf->right);
    }
    else
        return NULL;
}

node* btree::search(int key)
{
    return search(key,root);
}

void btree::insert(int key, struct node * leaf)
{
    if (key < leaf->key)
    {
        if (leaf->left != NULL)
            insert(key,leaf->left);
        else
        {
            leaf->left = new node;
            leaf  = leaf->left;
            leaf->key = key;
            leaf->left = NULL;
            leaf->right = NULL;
        }

    }
    else if(key >= leaf->key)
    {
        if (leaf->right != NULL)
            insert(key,leaf->right);
        else
        {
            leaf->right = new node;
            leaf = leaf->right;
            leaf->key = key;
            leaf->left = NULL;
            leaf->right = NULL;
        }
    }
}

void btree::insert(int key)
{
    if (root != NULL)
        insert(key,root);
    else
    {
        root = new node;
        root->key = key;
        root->left = NULL;
        root->right = NULL;
    }
}

void btree::destroy_tree()
{
    destroy_tree(root);
}

void btree::destroy_tree(node *leaf)
{
    if (leaf != NULL)
    {
        destroy_tree(leaf->left);
        destroy_tree(leaf->right);
        delete leaf;
    }
}

void btree::display_tree()
{
    display_tree(root);
}

void btree::display_tree(node *leaf)
{
   // cout << "\n";
    if (leaf != NULL)
    {
        display_tree(leaf->left);
        display_tree(leaf->right);
        cout << "\t" << leaf->key;
    }
}
btree::btree()
{
    root = NULL;
}

btree::~btree()
{
    destroy_tree();
}

int main()
{
    cout << "Hello world!" << endl;
    btree b1;
    b1.insert(10);
    b1.insert(2);
    b1.insert(33);
    b1.display_tree();
    btree b2;
    cout <<"\n\n";
    b2.insert(55);
    b2.display_tree();
    node * temp = new node;
    temp = b1.search(2) ;
    if(temp == NULL)
        cout << "\nKey not found";
    else
        cout <<"\n*" << temp->key <<" key found ";

    return 0;
}
