#include<iostream>
#include<limits>
#include<string.h>

using namespace std;

struct Stack
{
   int top;
   unsigned capacity;
   char * Array;
};

Stack * createStack(unsigned cap)
{
    Stack * st = new Stack();
    st->capacity = cap;
    st->top = -1;
    st->Array = new char[cap*sizeof(char)];
    return st;
}

int isFull(Stack *s)
{
    return (s->top == s->capacity -1);
}

int isEmpty(Stack *s)
{
    return (s->top == -1);
}

void push(Stack * s,char item)
{
        if (isFull(s))
            return;
        s->Array[++s->top] = item;
        cout << "\n\t "<<item<<" Pushed to stack";
}

int pop(Stack * s)
{
    if(isEmpty(s))
        return CHAR_MIN;
    else
        return s->Array[s->top--];
}

bool check_paranthese(char *exp)
{
    Stack *st = createStack(strlen(exp));
    for(int i = 0 ; exp[i] ; i++)
    {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
                push(st,exp[i]);
        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
             {
                char ch = pop(st);
                if (ch == CHAR_MIN)
                    return false;
             }

        else
        {
                cout << "\n\t Really bad error";
                return false;
        }



    }
    return true;
}

int main(void)
{

    cout << "\n\tHello World ";
    char exp[] = "()))((()";
    bool b = check_paranthese(exp);

        if( b == true)
            cout << "\n\n\t String is balanced";
        else
            cout << "\n\n\t String is not balanced";
        return 0;
}
